{"version":3,"sources":["logic.js","components/Cell/Cell.js","components/Row/Row.js","components/Table/Table.js","components/Bit/Bit.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","addZeroes","num","Number","isInteger","toFixed","numTo64BitBinary","n","toString","padStart","binToFloat","binary","sign_bit","slice","exponent_bits","mantissa_bits","sign","exponent","parseInt","mantissa","NaN","floatToNum","number","f","Float64Array","i","view","Uint8Array","buffer","result","length","bits","Array","fill","join","BigInt","Cell","cls","children","classes","className","Row","cols","colsClasses","map","inner","key","Table","table","colWidth","col_width","style","gridTemplateColumns","flipBit","bit","target","tagName","parentNode","color","checked","background","Bit","onToggle","onClick","type","onChange","App","useState","decimal","setDecimal","actual","setActual","error","setError","repeat","setBinary","hex","setHex","setSign","setExponent","setMantissa","enc_sign","setEnc_sign","enc_exponent","setEnc_exponent","enc_mantissa","setEnc_mantissa","updateInputs","inputs","from","document","getElementsByClassName","el","exp","m","float","querySelectorAll","forEach","float_table","id","_","inputs_table","value","onKeyPress","e","parseFloat","disabled","defaultValue","new_number","current_number","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0c06ed2b.chunk.js","sourcesContent":["/* global BigInt */\r\n\r\nfunction addZeroes(num) {\r\n    return Number.isInteger(num) ? num.toFixed(1) : num;\r\n}\r\n\r\nfunction numTo64BitBinary(n) {\r\n    return n.toString(2).padStart(64, '0');\r\n}\r\n\r\nfunction binToFloat(binary) {\r\n    const sign_bit = binary.slice(0, 1);\r\n    const exponent_bits = binary.slice(1, 12);\r\n    const mantissa_bits = binary.slice(12, 64);\r\n\r\n    const sign = sign_bit === '0' ? 1 : -1;\r\n    const exponent = parseInt(exponent_bits, 2);\r\n    const mantissa = parseInt(mantissa_bits, 2);\r\n\r\n    const first_mantissa_bit = exponent === 0 ? 0 : 1;\r\n\r\n    // Check for NaN\r\n    if (exponent === 0b11111111111 && mantissa !== 0) {\r\n        return NaN;\r\n    }\r\n\r\n    const float = sign * (first_mantissa_bit + mantissa / 2 ** 52) * 2 ** ((exponent || 1) - 1023);\r\n\r\n    return float;\r\n}\r\n\r\n/* function floatToNum(float) {\r\n    if (isNaN(float)) return 0x7ff0000000000001n;\r\n\r\n    const sign = float < 0 ? 1n : 0n;\r\n\r\n    if (float == 0.0) return Number(sign) * float;\r\n    float = Math.abs(float);\r\n\r\n    const exponent = Math.floor(Math.log(float) / Math.LN2);\r\n    const mantissa = (float / 2 ** exponent) * 2 ** 52 - 2 ** 52;\r\n    //               float * 2 ** (52 - exponent) - 2 ** 52;\r\n    console.log(`sign=${sign}\\texponent=${exponent}\\tmantissa=${mantissa}\r\nsign=${sign << 63n}\\texponent=${(BigInt(exponent) + 1023n) << 52n}\\tmantissa=${\r\n        mantissa < 0 ? (1n << 52n) + BigInt(mantissa) : BigInt(mantissa)\r\n    }`);\r\n    return (\r\n        (sign << 63n) |\r\n        ((BigInt(exponent) + 1023n) << 52n) |\r\n        (mantissa < 0 ? (1n << 52n) + BigInt(mantissa) : BigInt(mantissa))\r\n    );\r\n} */\r\n\r\nfunction floatToNum(number) {\r\n    let f = new Float64Array(1);\r\n    f[0] = number;\r\n    let view = new Uint8Array(f.buffer);\r\n    let i,\r\n        result = '';\r\n    for (i = view.length - 1; i >= 0; i--) {\r\n        let bits = view[i].toString(2);\r\n        if (bits.length < 8) {\r\n            bits = new Array(8 - bits.length).fill('0').join('') + bits;\r\n        }\r\n        result += bits;\r\n    }\r\n    return BigInt('0b' + result);\r\n}\r\n\r\nmodule.exports = { addZeroes, numTo64BitBinary, binToFloat, floatToNum };\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Cell.css';\r\n\r\nfunction Cell({ cls, children }) {\r\n    const classes = `cell ${cls}`;\r\n    return <div className={classes}>{children}</div>;\r\n}\r\n\r\nCell.propTypes = {\r\n    cls: PropTypes.string.isRequired,\r\n    children: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.element,\r\n        PropTypes.arrayOf(PropTypes.element),\r\n    ]).isRequired,\r\n};\r\n\r\nexport default Cell;\r\n","import React from 'react';\r\nimport Cell from '../Cell/Cell';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Row({ cols, colsClasses }) {\r\n    return cols.map((inner, i) => {\r\n        const classes = colsClasses[i % 4];\r\n        return (\r\n            <Cell key={i} cls={classes}>\r\n                {inner}\r\n            </Cell>\r\n        );\r\n    });\r\n}\r\n\r\nRow.propTypes = {\r\n    cols: PropTypes.arrayOf(\r\n        PropTypes.oneOfType([\r\n            PropTypes.string,\r\n            PropTypes.element,\r\n            PropTypes.arrayOf(PropTypes.element),\r\n        ])\r\n    ).isRequired,\r\n    colsClasses: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Row;\r\n","import React from 'react';\r\nimport Row from '../Row/Row';\r\nimport './Table.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Table({ table, colWidth, colsClasses }) {\r\n    const col_width = colWidth || `repeat(${table[0].length}, max-content)`;\r\n\r\n    return (\r\n        <div className='table' style={{ gridTemplateColumns: col_width }}>\r\n            {table.map((cols, i) => {\r\n                return <Row key={i} cols={cols} colsClasses={colsClasses}></Row>;\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nTable.propTypes = {\r\n    table: PropTypes.arrayOf(\r\n        PropTypes.arrayOf(\r\n            PropTypes.oneOfType([\r\n                PropTypes.string,\r\n                PropTypes.element,\r\n                PropTypes.arrayOf(PropTypes.element),\r\n            ])\r\n        ).isRequired\r\n    ),\r\n    colWidth: PropTypes.string,\r\n    colsClasses: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Table;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Bit.css';\r\n\r\nfunction flipBit(bit) {\r\n    const target = bit.target || bit;\r\n    if (target.tagName === 'INPUT') {\r\n        target.parentNode.style.color = target.checked ? '#000000' : '#EEEEEE';\r\n        target.parentNode.style.background = target.checked ? '#EEEEEE' : '#222222';\r\n    }\r\n}\r\n\r\nfunction Bit({ onToggle }) {\r\n    return (\r\n        <label className='checkbox' onClick={flipBit}>\r\n            <input className='bit' type='checkbox' onChange={onToggle} />\r\n            <span></span>\r\n        </label>\r\n    );\r\n}\r\n\r\nBit.propTypes = {\r\n    onToggle: PropTypes.func.isRequired,\r\n};\r\n\r\nexport { flipBit, Bit };\r\n","/* global BigInt */\r\nimport React, { useState } from 'react';\r\nimport './App.css';\r\nimport Table from './components/Table/Table';\r\nimport { Bit } from './components/Bit/Bit';\r\nimport { binToFloat, floatToNum, numTo64BitBinary, addZeroes } from './logic';\r\nimport { flipBit } from './components/Bit/Bit';\r\n\r\nexport default function App() {\r\n    const [decimal, setDecimal] = useState('0.0');\r\n    const [actual, setActual] = useState('0.0');\r\n    const [error, setError] = useState('0.0');\r\n    const [binary, setBinary] = useState('0'.repeat(64));\r\n    const [hex, setHex] = useState('0x0');\r\n\r\n    const [sign, setSign] = useState('+1');\r\n    const [exponent, setExponent] = useState('-1023 (denormalized)');\r\n    const [mantissa, setMantissa] = useState('1.0 (denormalized)');\r\n\r\n    const [enc_sign, setEnc_sign] = useState('0');\r\n    const [enc_exponent, setEnc_exponent] = useState('0');\r\n    const [enc_mantissa, setEnc_mantissa] = useState('0');\r\n\r\n    function updateInputs(inputs) {\r\n        const bits =\r\n            inputs ||\r\n            Array.from(document.getElementsByClassName('bit'))\r\n                .map((el) => (el.checked ? 1 : 0))\r\n                .join('');\r\n\r\n        const sign_bit = bits.slice(0, 1);\r\n        const exponent_bits = bits.slice(1, 12);\r\n        const mantissa_bits = bits.slice(12, 64);\r\n\r\n        const exp = parseInt(exponent_bits, 2);\r\n        const m = parseInt(mantissa_bits, 2);\r\n\r\n        setSign(sign_bit === '0' ? '+1' : '-1');\r\n        setExponent(`${exp - 1023}${exp === 0 ? ' (denormalized)' : ''}`);\r\n        setMantissa(\r\n            `${addZeroes((exp === 0 ? 0 : 1) + m / 2 ** 52)}${exp === 0 ? ' (denormalized)' : ''}`\r\n        );\r\n\r\n        setEnc_sign(sign_bit);\r\n        setEnc_exponent(exp.toString());\r\n        setEnc_mantissa(parseInt(mantissa_bits, 2).toString());\r\n\r\n        const num = BigInt('0b' + bits) & 0xffffffffffffffffn;\r\n        const float = binToFloat(bits);\r\n\r\n        setDecimal(addZeroes(float));\r\n        setActual();\r\n        setError();\r\n        setBinary(num.toString(2).padStart(64, '0'));\r\n        setHex('0x' + num.toString(16));\r\n\r\n        document.querySelectorAll('input.bit').forEach((bit, i) => {\r\n            bit.checked = bits[i] === '1' ? true : false;\r\n            flipBit(bit);\r\n        });\r\n    }\r\n\r\n    const float_table = [\r\n        ['', 'Sign', 'Exponent', 'Mantissa'],\r\n        [\r\n            'Value:',\r\n            sign,\r\n            <span>\r\n                2<sup id='exponent'>{exponent}</sup>\r\n            </span>,\r\n            mantissa,\r\n        ],\r\n        ['Encoded as:', enc_sign, enc_exponent, enc_mantissa],\r\n        [\r\n            'Binary:',\r\n            <Bit onToggle={() => updateInputs()}></Bit>,\r\n            Array(11)\r\n                .fill()\r\n                .map((_, i) => <Bit key={i} onToggle={() => updateInputs()}></Bit>),\r\n            <div className='wrap-2-col'>\r\n                {Array(52)\r\n                    .fill()\r\n                    .map((_, i) => (\r\n                        <Bit key={i + 11} onToggle={() => updateInputs()}></Bit>\r\n                    ))}\r\n            </div>,\r\n        ],\r\n    ];\r\n    const float_table_classes = ['', 'center sign', 'center exponent', 'center mantissa'];\r\n\r\n    const inputs_table = [\r\n        [\r\n            'Decimal representation:',\r\n            <input\r\n                className='input'\r\n                value={decimal}\r\n                onKeyPress={(e) => {\r\n                    if (e.key === 'Enter') {\r\n                        const float = parseFloat(e.target.value) || 0.0;\r\n                        updateInputs(numTo64BitBinary(floatToNum(float)));\r\n                    }\r\n                }}\r\n                onChange={(e) => {\r\n                    setDecimal(e.target.value);\r\n                }}\r\n            />,\r\n        ],\r\n        [\r\n            'Value actually stored in float:',\r\n            <input className='input' disabled defaultValue={actual} />,\r\n        ],\r\n        ['Error due to conversion:', <input className='input' disabled defaultValue={error} />],\r\n        [\r\n            'Binary Representation:',\r\n            <input\r\n                className='input'\r\n                value={binary}\r\n                onKeyPress={(e) => {\r\n                    if (e.key === 'Enter') {\r\n                        updateInputs(e.target.value.padStart(64, '0'));\r\n                    }\r\n                }}\r\n                onChange={(e) => {\r\n                    setBinary(e.target.value);\r\n                }}\r\n            />,\r\n        ],\r\n        [\r\n            'Hexadecimal Representation:',\r\n            <input\r\n                className='input'\r\n                value={hex}\r\n                onKeyPress={(e) => {\r\n                    if (e.key === 'Enter') {\r\n                        const number = BigInt(e.target.value) || 0;\r\n                        updateInputs(numTo64BitBinary(number));\r\n                    }\r\n                }}\r\n                onChange={(e) => {\r\n                    setHex(e.target.value);\r\n                }}\r\n            />,\r\n        ],\r\n    ];\r\n\r\n    const input_table_classes = ['label', 'label'];\r\n\r\n    return (\r\n        <div className='container'>\r\n            <Table\r\n                table={float_table}\r\n                colsClasses={float_table_classes}\r\n                colWidth={'1fr 0fr 0fr 3fr'}\r\n            ></Table>\r\n            <div className='inputs'>\r\n                <Table table={inputs_table} colsClasses={input_table_classes}></Table>\r\n                <div className='modifiers'>\r\n                    <input\r\n                        type='button'\r\n                        value='+1'\r\n                        onClick={(e) => {\r\n                            const current_number = BigInt(hex);\r\n                            const new_number = (current_number + 1n) & 0xffffffffffffffffn;\r\n                            updateInputs(numTo64BitBinary(new_number));\r\n                        }}\r\n                    />\r\n                    <input\r\n                        type='button'\r\n                        value='-1'\r\n                        onClick={(e) => {\r\n                            const current_number = BigInt(hex);\r\n                            const new_number =\r\n                                current_number === 0n ? 0xffffffffffffffffn : current_number - 1n;\r\n                            updateInputs(numTo64BitBinary(new_number));\r\n                        }}\r\n                    />\r\n                    <input\r\n                        type='button'\r\n                        value='<<'\r\n                        onClick={(e) => {\r\n                            const current_number = BigInt(hex);\r\n                            const new_number = (current_number << 1n) & 0xffffffffffffffffn;\r\n                            updateInputs(numTo64BitBinary(new_number));\r\n                        }}\r\n                    />\r\n                    <input\r\n                        type='button'\r\n                        value='>>'\r\n                        onClick={(e) => {\r\n                            const current_number = BigInt(hex);\r\n                            const new_number = current_number >> 1n;\r\n                            updateInputs(numTo64BitBinary(new_number));\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}