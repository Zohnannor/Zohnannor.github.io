{"version":3,"sources":["logic.js","components/Bit/Bit.js","components/Cell/Cell.js","components/Row/Row.js","components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","addZeroes","num","Number","isInteger","toFixed","numTo64BitBinary","n","toString","padStart","binToFloat","binary","sign_bit","slice","exponent_bits","mantissa_bits","sign","exponent","parseInt","mantissa","NaN","floatToNum","number","f","Float64Array","i","view","Uint8Array","buffer","result","length","bits","Array","fill","join","BigInt","flipBit","bit","target","tagName","parentNode","style","color","checked","background","Bit","onToggle","className","onClick","type","onChange","Cell","cls","children","classes","Row","cols","colsClasses","map","inner","key","Table","table","colWidth","col_width","gridTemplateColumns","App","useState","decimal","setDecimal","actual","setActual","error","setError","repeat","setBinary","hex","setHex","setSign","setExponent","setMantissa","enc_sign","setEnc_sign","enc_exponent","setEnc_exponent","enc_mantissa","setEnc_mantissa","updateInputs","inputs","from","document","getElementsByClassName","el","exp","m","float","querySelectorAll","forEach","float_table","id","_","inputs_table","value","onKeyPress","e","parseFloat","disabled","defaultValue","new_number","current_number","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2GAqEAA,EAAOC,QAAU,CAAEC,UAnEnB,SAAmBC,GACf,OAAOC,OAAOC,UAAUF,GAAOA,EAAIG,QAAQ,GAAKH,GAkEtBI,iBA/D9B,SAA0BC,GACtB,OAAOA,EAAEC,SAAS,GAAGC,SAAS,GAAI,MA8DUC,WA3DhD,SAAoBC,GAChB,IAAMC,EAAWD,EAAOE,MAAM,EAAG,GAC3BC,EAAgBH,EAAOE,MAAM,EAAG,IAChCE,EAAgBJ,EAAOE,MAAM,GAAI,IAEjCG,EAAoB,MAAbJ,EAAmB,GAAK,EAC/BK,EAAWC,SAASJ,EAAe,GACnCK,EAAWD,SAASH,EAAe,GAKzC,OAAiB,OAAbE,GAA2C,IAAbE,EACvBC,IAGGJ,IAP0B,IAAbC,EAAiB,EAAI,GAOLE,EAAQ,SAAG,EAAK,KAA7C,SAAmD,GAAOF,GAAY,GAAK,OA2CjCI,WAhB5D,SAAoBC,GAChB,IAAMC,EAAI,IAAIC,aAAa,GAC3BD,EAAE,GAAKD,EACP,IACIG,EADEC,EAAO,IAAIC,WAAWJ,EAAEK,QAE1BC,EAAS,GACb,IAAKJ,EAAIC,EAAKI,OAAS,EAAGL,GAAK,EAAGA,IAAK,CACnC,IAAIM,EAAOL,EAAKD,GAAGjB,SAAS,GACxBuB,EAAKD,OAAS,IACdC,EAAO,IAAIC,MAAM,EAAID,EAAKD,QAAQG,KAAK,KAAKC,KAAK,IAAMH,GAE3DF,GAAUE,EAEd,OAAOI,OAAO,KAAON,M,4NC9DzB,SAASO,EAAQC,GACb,IAAMC,EAASD,EAAIC,QAAUD,EACN,UAAnBC,EAAOC,UACPD,EAAOE,WAAWC,MAAMC,MAAQJ,EAAOK,QAAU,UAAY,UAC7DL,EAAOE,WAAWC,MAAMG,WAAaN,EAAOK,QAAU,UAAY,WAI1E,SAASE,EAAT,GAA4B,IAAbC,EAAY,EAAZA,SACX,OACI,2BAAOC,UAAU,WAAWC,QAASZ,GACjC,2BAAOW,UAAU,MAAME,KAAK,WAAWC,SAAUJ,IACjD,gC,MCEGK,MAdf,YAAkC,IAAlBC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,SACXC,EAAO,eAAWF,GACxB,OAAO,yBAAKL,UAAWO,GAAUD,ICoBtBE,MAtBf,YAAqC,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YACjB,OAAOD,EAAKE,KAAI,SAACC,EAAOlC,GACpB,IAAM6B,EAAUG,EAAYhC,EAAI,GAChC,OACI,kBAAC,EAAD,CAAMmC,IAAKnC,EAAG2B,IAAKE,GACdK,O,MCsBFE,MA1Bf,YAAkD,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,SAAUN,EAAe,EAAfA,YACxBO,EAAYD,GAAQ,iBAAcD,EAAM,GAAGhC,OAAvB,kBAE1B,OACI,yBAAKiB,UAAU,QAAQN,MAAO,CAAEwB,oBAAqBD,IAChDF,EAAMJ,KAAI,SAACF,EAAM/B,GACd,OAAO,kBAAC,EAAD,CAAKmC,IAAKnC,EAAG+B,KAAMA,EAAMC,YAAaA,S,OCJ9C,SAASS,IAAO,IAAD,EACIC,mBAAS,OADb,mBACnBC,EADmB,KACVC,EADU,OAEEF,mBAAS,OAFX,mBAEnBG,EAFmB,KAEXC,EAFW,OAGAJ,mBAAS,OAHT,mBAGnBK,EAHmB,KAGZC,EAHY,OAIEN,mBAAS,IAAIO,OAAO,KAJtB,mBAInB/D,EAJmB,KAIXgE,EAJW,OAKJR,mBAAS,OALL,mBAKnBS,EALmB,KAKdC,EALc,OAOFV,mBAAS,MAPP,mBAOnBnD,EAPmB,KAOb8D,EAPa,OAQMX,mBAAS,wBARf,mBAQnBlD,EARmB,KAQT8D,EARS,OASMZ,mBAAS,sBATf,mBASnBhD,EATmB,KAST6D,EATS,OAWMb,mBAAS,KAXf,mBAWnBc,EAXmB,KAWTC,EAXS,OAYcf,mBAAS,KAZvB,mBAYnBgB,EAZmB,KAYLC,EAZK,OAacjB,mBAAS,KAbvB,mBAanBkB,EAbmB,KAaLC,EAbK,KAe1B,SAASC,EAAaC,GAClB,IAAMzD,EACFyD,GACAxD,MAAMyD,KAAKC,SAASC,uBAAuB,QACtCjC,KAAI,SAAAkC,GAAE,OAAKA,EAAGjD,QAAU,EAAI,KAC5BT,KAAK,IAERtB,EAAWmB,EAAKlB,MAAM,EAAG,GACzBC,EAAgBiB,EAAKlB,MAAM,EAAG,IAC9BE,EAAgBgB,EAAKlB,MAAM,GAAI,IAE/BgF,EAAM3E,SAASJ,EAAe,GAC9BgF,EAAI5E,SAASH,EAAe,GAElC+D,EAAqB,MAAblE,EAAmB,KAAO,MAClCmE,EAAY,GAAD,OAAIc,EAAM,MAAV,OAAyB,IAARA,EAAY,kBAAoB,KAC5Db,EAAY,GAAD,OACJ/E,qBAAmB,IAAR4F,EAAY,EAAI,GAAKC,EAAC,SAAG,EAAK,MADrC,OACmD,IAARD,EAAY,kBAAoB,KAGtFX,EAAYtE,GACZwE,EAAgBS,EAAIrF,YACpB8E,EAAgBpE,SAASH,EAAe,GAAGP,YAE3C,IAAMN,EAA4B,oBAAtBiC,OAAO,KAAOJ,GACpBgE,EAAQrF,qBAAWqB,GAEzBsC,EAAWpE,oBAAU8F,IACrBxB,IACAE,IACAE,EAAUzE,EAAIM,SAAS,GAAGC,SAAS,GAAI,MACvCoE,EAAO,KAAO3E,EAAIM,SAAS,KAE3BkF,SAASM,iBAAiB,aAAaC,SAAQ,SAAC5D,EAAKZ,GACjDY,EAAIM,QAAsB,MAAZZ,EAAKN,GACnBW,EAAQC,MAIhB,IAAM6D,EAAc,CAChB,CAAC,GAAI,OAAQ,WAAY,YACzB,CACI,SACAlF,EACA,kCACK,yBAAKmF,GAAG,YAAYlF,IAEzBE,GAEJ,CAAC,cAAe8D,EAAUE,EAAcE,GACxC,CACI,UACA,kBAAC,EAAD,CAAKvC,SAAU,kBAAMyC,OACrBvD,MAAM,IACDC,OACAyB,KAAI,SAAC0C,EAAG3E,GAAJ,OAAU,kBAAC,EAAD,CAAKmC,IAAKnC,EAAGqB,SAAU,kBAAMyC,UAChD,yBAAKxC,UAAU,cACVf,MAAM,IACFC,OACAyB,KAAI,SAAC0C,EAAG3E,GAAJ,OACD,kBAAC,EAAD,CAAKmC,IAAKnC,EAAI,GAAIqB,SAAU,kBAAMyC,aAOhDc,EAAe,CACjB,CACI,0BACA,2BACItD,UAAU,QACVuD,MAAOlC,EACPmC,WAAY,SAAAC,GACR,GAAc,UAAVA,EAAE5C,IAAiB,CACnB,IAAMmC,EAAQU,WAAWD,EAAElE,OAAOgE,QAAU,EAC5Cf,EAAajF,2BAAiBe,qBAAW0E,OAGjD7C,SAAU,SAAAsD,GACNnC,EAAWmC,EAAElE,OAAOgE,WAIhC,CACI,kCACA,2BAAOvD,UAAU,QAAQ2D,UAAQ,EAACC,aAAcrC,KAEpD,CAAC,2BAA4B,2BAAOvB,UAAU,QAAQ2D,UAAQ,EAACC,aAAcnC,KAC7E,CACI,yBACA,2BACIzB,UAAU,QACVuD,MAAO3F,EACP4F,WAAY,SAAAC,GACM,UAAVA,EAAE5C,KACF2B,EAAaiB,EAAElE,OAAOgE,MAAM7F,SAAS,GAAI,OAGjDyC,SAAU,SAAAsD,GACN7B,EAAU6B,EAAElE,OAAOgE,WAI/B,CACI,8BACA,2BACIvD,UAAU,QACVuD,MAAO1B,EACP2B,WAAY,SAAAC,GACR,GAAc,UAAVA,EAAE5C,IAAiB,CACnB,IAAMtC,EAASa,OAAOqE,EAAElE,OAAOgE,QAAU,EACzCf,EAAajF,2BAAiBgB,MAGtC4B,SAAU,SAAAsD,GACN3B,EAAO2B,EAAElE,OAAOgE,YAQhC,OACI,yBAAKvD,UAAU,aACX,kBAAC,EAAD,CACIe,MAAOoC,EACPzC,YA/DgB,CAAC,GAAI,cAAe,kBAAmB,mBAgEvDM,SAAU,oBAEd,yBAAKhB,UAAU,UACX,kBAAC,EAAD,CAAOe,MAAOuC,EAAc5C,YAVZ,CAAC,QAAS,WAW1B,yBAAKV,UAAU,aACX,2BACIE,KAAK,SACLqD,MAAM,KACNtD,QAAS,SAAAwD,GACL,IACMI,EADiBzE,OAAOyC,GACO,GAAM,oBAC3CW,EAAajF,2BAAiBsG,OAGtC,2BACI3D,KAAK,SACLqD,MAAM,KACNtD,QAAS,SAAAwD,GACL,IAAMK,EAAiB1E,OAAOyC,GACxBgC,EACiB,KAAnBC,EAAwB,oBAAsBA,EAAiB,GACnEtB,EAAajF,2BAAiBsG,OAGtC,2BACI3D,KAAK,SACLqD,MAAM,KACNtD,QAAS,SAAAwD,GACL,IACMI,EADiBzE,OAAOyC,IACQ,GAAM,oBAC5CW,EAAajF,2BAAiBsG,OAGtC,2BACI3D,KAAK,SACLqD,MAAM,KACNtD,QAAS,SAAAwD,GACL,IACMI,EADiBzE,OAAOyC,IACO,GACrCW,EAAajF,2BAAiBsG,U,UClLpDE,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAA9D,GACL0D,QAAQ1D,MAAM,4CAA6CA,MC1FjE+D,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJ/C,SAASgD,eAAe,SDYrB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,oBAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,oBAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAuB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.41ec20c7.chunk.js","sourcesContent":["/* global BigInt */\n\nfunction addZeroes(num) {\n    return Number.isInteger(num) ? num.toFixed(1) : num;\n}\n\nfunction numTo64BitBinary(n) {\n    return n.toString(2).padStart(64, '0');\n}\n\nfunction binToFloat(binary) {\n    const sign_bit = binary.slice(0, 1);\n    const exponent_bits = binary.slice(1, 12);\n    const mantissa_bits = binary.slice(12, 64);\n\n    const sign = sign_bit === '0' ? 1 : -1;\n    const exponent = parseInt(exponent_bits, 2);\n    const mantissa = parseInt(mantissa_bits, 2);\n\n    const first_mantissa_bit = exponent === 0 ? 0 : 1;\n\n    // Check for NaN\n    if (exponent === 0b11111111111 && mantissa !== 0) {\n        return NaN;\n    }\n\n    const float = sign * (first_mantissa_bit + mantissa / 2 ** 52) * 2 ** ((exponent || 1) - 1023);\n\n    return float;\n}\n\n/* function floatToNum(float) {\n    if (isNaN(float)) return 0x7ff0000000000001n;\n\n    const sign = float < 0 ? 1n : 0n;\n\n    if (float == 0.0) return Number(sign) * float;\n    float = Math.abs(float);\n\n    const exponent = Math.floor(Math.log(float) / Math.LN2);\n    const mantissa = (float / 2 ** exponent) * 2 ** 52 - 2 ** 52;\n    //               float * 2 ** (52 - exponent) - 2 ** 52;\n    console.log(`sign=${sign}\\texponent=${exponent}\\tmantissa=${mantissa}\nsign=${sign << 63n}\\texponent=${(BigInt(exponent) + 1023n) << 52n}\\tmantissa=${\n        mantissa < 0 ? (1n << 52n) + BigInt(mantissa) : BigInt(mantissa)\n    }`);\n    return (\n        (sign << 63n) |\n        ((BigInt(exponent) + 1023n) << 52n) |\n        (mantissa < 0 ? (1n << 52n) + BigInt(mantissa) : BigInt(mantissa))\n    );\n} */\n\nfunction floatToNum(number) {\n    const f = new Float64Array(1);\n    f[0] = number;\n    const view = new Uint8Array(f.buffer);\n    let i,\n        result = '';\n    for (i = view.length - 1; i >= 0; i--) {\n        let bits = view[i].toString(2);\n        if (bits.length < 8) {\n            bits = new Array(8 - bits.length).fill('0').join('') + bits;\n        }\n        result += bits;\n    }\n    return BigInt('0b' + result);\n}\n\nmodule.exports = { addZeroes, numTo64BitBinary, binToFloat, floatToNum };\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport './Bit.css';\n\nfunction flipBit(bit) {\n    const target = bit.target || bit;\n    if (target.tagName === 'INPUT') {\n        target.parentNode.style.color = target.checked ? '#000000' : '#EEEEEE';\n        target.parentNode.style.background = target.checked ? '#EEEEEE' : '#222222';\n    }\n}\n\nfunction Bit({ onToggle }) {\n    return (\n        <label className='checkbox' onClick={flipBit}>\n            <input className='bit' type='checkbox' onChange={onToggle} />\n            <span></span>\n        </label>\n    );\n}\n\nBit.propTypes = {\n    onToggle: PropTypes.func.isRequired,\n};\n\nexport { flipBit, Bit };\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport './Cell.css';\n\nfunction Cell({ cls, children }) {\n    const classes = `cell ${cls}`;\n    return <div className={classes}>{children}</div>;\n}\n\nCell.propTypes = {\n    cls: PropTypes.string.isRequired,\n    children: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.element,\n        PropTypes.arrayOf(PropTypes.element),\n    ]).isRequired,\n};\n\nexport default Cell;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Cell from '../Cell/Cell';\n\nfunction Row({ cols, colsClasses }) {\n    return cols.map((inner, i) => {\n        const classes = colsClasses[i % 4];\n        return (\n            <Cell key={i} cls={classes}>\n                {inner}\n            </Cell>\n        );\n    });\n}\n\nRow.propTypes = {\n    cols: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.element,\n            PropTypes.arrayOf(PropTypes.element),\n        ])\n    ).isRequired,\n    colsClasses: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Row;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Row from '../Row/Row';\nimport './Table.css';\n\nfunction Table({ table, colWidth, colsClasses }) {\n    const col_width = colWidth || `repeat(${table[0].length}, max-content)`;\n\n    return (\n        <div className='table' style={{ gridTemplateColumns: col_width }}>\n            {table.map((cols, i) => {\n                return <Row key={i} cols={cols} colsClasses={colsClasses}></Row>;\n            })}\n        </div>\n    );\n}\n\nTable.propTypes = {\n    table: PropTypes.arrayOf(\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.element,\n                PropTypes.arrayOf(PropTypes.element),\n            ])\n        ).isRequired\n    ),\n    colWidth: PropTypes.string,\n    colsClasses: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nexport default Table;\n","/* global BigInt */\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Bit, flipBit } from './components/Bit/Bit';\nimport Table from './components/Table/Table';\nimport { addZeroes, binToFloat, floatToNum, numTo64BitBinary } from './logic';\n\nexport default function App() {\n    const [decimal, setDecimal] = useState('0.0');\n    const [actual, setActual] = useState('0.0');\n    const [error, setError] = useState('0.0');\n    const [binary, setBinary] = useState('0'.repeat(64));\n    const [hex, setHex] = useState('0x0');\n\n    const [sign, setSign] = useState('+1');\n    const [exponent, setExponent] = useState('-1023 (denormalized)');\n    const [mantissa, setMantissa] = useState('1.0 (denormalized)');\n\n    const [enc_sign, setEnc_sign] = useState('0');\n    const [enc_exponent, setEnc_exponent] = useState('0');\n    const [enc_mantissa, setEnc_mantissa] = useState('0');\n\n    function updateInputs(inputs) {\n        const bits =\n            inputs ||\n            Array.from(document.getElementsByClassName('bit'))\n                .map(el => (el.checked ? 1 : 0))\n                .join('');\n\n        const sign_bit = bits.slice(0, 1);\n        const exponent_bits = bits.slice(1, 12);\n        const mantissa_bits = bits.slice(12, 64);\n\n        const exp = parseInt(exponent_bits, 2);\n        const m = parseInt(mantissa_bits, 2);\n\n        setSign(sign_bit === '0' ? '+1' : '-1');\n        setExponent(`${exp - 1023}${exp === 0 ? ' (denormalized)' : ''}`);\n        setMantissa(\n            `${addZeroes((exp === 0 ? 0 : 1) + m / 2 ** 52)}${exp === 0 ? ' (denormalized)' : ''}`\n        );\n\n        setEnc_sign(sign_bit);\n        setEnc_exponent(exp.toString());\n        setEnc_mantissa(parseInt(mantissa_bits, 2).toString());\n\n        const num = BigInt('0b' + bits) & 0xffffffffffffffffn;\n        const float = binToFloat(bits);\n\n        setDecimal(addZeroes(float));\n        setActual();\n        setError();\n        setBinary(num.toString(2).padStart(64, '0'));\n        setHex('0x' + num.toString(16));\n\n        document.querySelectorAll('input.bit').forEach((bit, i) => {\n            bit.checked = bits[i] === '1' ? true : false;\n            flipBit(bit);\n        });\n    }\n\n    const float_table = [\n        ['', 'Sign', 'Exponent', 'Mantissa'],\n        [\n            'Value:',\n            sign,\n            <span>\n                2<sup id='exponent'>{exponent}</sup>\n            </span>,\n            mantissa,\n        ],\n        ['Encoded as:', enc_sign, enc_exponent, enc_mantissa],\n        [\n            'Binary:',\n            <Bit onToggle={() => updateInputs()}></Bit>,\n            Array(11)\n                .fill()\n                .map((_, i) => <Bit key={i} onToggle={() => updateInputs()}></Bit>),\n            <div className='wrap-2-col'>\n                {Array(52)\n                    .fill()\n                    .map((_, i) => (\n                        <Bit key={i + 11} onToggle={() => updateInputs()}></Bit>\n                    ))}\n            </div>,\n        ],\n    ];\n    const float_table_classes = ['', 'center sign', 'center exponent', 'center mantissa'];\n\n    const inputs_table = [\n        [\n            'Decimal representation:',\n            <input\n                className='input'\n                value={decimal}\n                onKeyPress={e => {\n                    if (e.key === 'Enter') {\n                        const float = parseFloat(e.target.value) || 0.0;\n                        updateInputs(numTo64BitBinary(floatToNum(float)));\n                    }\n                }}\n                onChange={e => {\n                    setDecimal(e.target.value);\n                }}\n            />,\n        ],\n        [\n            'Value actually stored in float:',\n            <input className='input' disabled defaultValue={actual} />,\n        ],\n        ['Error due to conversion:', <input className='input' disabled defaultValue={error} />],\n        [\n            'Binary Representation:',\n            <input\n                className='input'\n                value={binary}\n                onKeyPress={e => {\n                    if (e.key === 'Enter') {\n                        updateInputs(e.target.value.padStart(64, '0'));\n                    }\n                }}\n                onChange={e => {\n                    setBinary(e.target.value);\n                }}\n            />,\n        ],\n        [\n            'Hexadecimal Representation:',\n            <input\n                className='input'\n                value={hex}\n                onKeyPress={e => {\n                    if (e.key === 'Enter') {\n                        const number = BigInt(e.target.value) || 0;\n                        updateInputs(numTo64BitBinary(number));\n                    }\n                }}\n                onChange={e => {\n                    setHex(e.target.value);\n                }}\n            />,\n        ],\n    ];\n\n    const input_table_classes = ['label', 'label'];\n\n    return (\n        <div className='container'>\n            <Table\n                table={float_table}\n                colsClasses={float_table_classes}\n                colWidth={'1fr 0fr 0fr 3fr'}\n            ></Table>\n            <div className='inputs'>\n                <Table table={inputs_table} colsClasses={input_table_classes}></Table>\n                <div className='modifiers'>\n                    <input\n                        type='button'\n                        value='+1'\n                        onClick={e => {\n                            const current_number = BigInt(hex);\n                            const new_number = (current_number + 1n) & 0xffffffffffffffffn;\n                            updateInputs(numTo64BitBinary(new_number));\n                        }}\n                    />\n                    <input\n                        type='button'\n                        value='-1'\n                        onClick={e => {\n                            const current_number = BigInt(hex);\n                            const new_number =\n                                current_number === 0n ? 0xffffffffffffffffn : current_number - 1n;\n                            updateInputs(numTo64BitBinary(new_number));\n                        }}\n                    />\n                    <input\n                        type='button'\n                        value='<<'\n                        onClick={e => {\n                            const current_number = BigInt(hex);\n                            const new_number = (current_number << 1n) & 0xffffffffffffffffn;\n                            updateInputs(numTo64BitBinary(new_number));\n                        }}\n                    />\n                    <input\n                        type='button'\n                        value='>>'\n                        onClick={e => {\n                            const current_number = BigInt(hex);\n                            const new_number = current_number >> 1n;\n                            updateInputs(numTo64BitBinary(new_number));\n                        }}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}